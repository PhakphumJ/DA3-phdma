---
title: "Assignment3_code"
author: "Phakphum Jatupitpornchan"
format: pdf
execute: 
  echo: false
---

# Task 1
Importing Data
```{r}
#| warning: false
#| echo: false
### Use packages, Import Data
rm(list=ls())
# Import Libraries
library(readr)
library(dplyr)
library(ggplot2)
library(weights)
library(caret)
library(kableExtra)
library(tidyr)
library(fastDummies)

# Set Working Directory

setwd("D:/Onedrive-CEU/OneDrive - Central European University/CEU/Prediction with Machine Learning/Assignment/DA3-phdma/Assignment 3")

# Import Data

Data_panel <- read_csv("cs_bisnode_panel.csv")


```

```{r}
# inspect year in Data_panel
Data_panel %>% 
  group_by(year) %>% 
  summarise(n = n())
```


```{r}
## Restrict to those with sales > 6,000 eur
Data_panel <- Data_panel %>% 
  filter(sales > 6000)
```


## Sample Design

We will have 3 samples. 2011-2013 in Data_panel. However, in each sample, we will use values from the previous year as well to create variables such as growth of employment. Hence, in each data set, we will have 2 years of data. For example, in the first data set, we will have 2010 and 2011. In the second data set, we will have 2011 and 2012. In the third data set, we will have 2012 and 2013.

## Label Engineering

The outcome variable (*fast_growing*) is an indicator of whether the firm achieves an **outstanding annual growth rate in sales revenue for the next 2 consecutive years**. 

Outstanding annual growth rate is defined as having higher growth rate than the average growth rate of firms in the same industry by more than 20% in that year.

For example, when the average growth rate of sales in the industry is 5% in 2011 and 2012, if the firm's annual growth rate in sales is 6.1% in 2011 and 6.1% in 2012, then *fast_growing* = 1. However, if the firm's annual growth rate in sales is 6.1% in 2011 but 5.9% in 2012, then *fast_growing* = 0.



```{r}
### Create variable fast_growing from profit_loss_year

## drop observations with NA in sales
Data_panel <- Data_panel %>% 
  filter(!is.na(sales))

## arrange Data_panel by comp_id and year.
Data_panel <- Data_panel %>% 
  arrange(comp_id, year)

## Create variable growth_rate for each firm in each year
Data_panel <- Data_panel %>% 
  group_by(comp_id) %>% 
  mutate(growth_rate = sales/lag(sales) - 1)


## Create variable growth_rate_industry
Data_panel <- Data_panel %>% 
  group_by(ind, year) %>% 
  mutate(growth_rate_industry = mean(growth_rate, na.rm = TRUE))


## Create variable growth_rate_t+1
Data_panel <- Data_panel %>% 
  group_by(comp_id) %>% 
  mutate(growth_rate_t1 = lead(growth_rate, 1))

## Create variable growth_rate_t+2
Data_panel <- Data_panel %>% 
  group_by(comp_id) %>% 
  mutate(growth_rate_t2 = lead(growth_rate, 2))

## Create variable growth_rate_industry_t+1
Data_panel <- Data_panel %>% 
  group_by(ind, year) %>% 
  mutate(growth_rate_industry_t1 = lead(growth_rate_industry, 1))

## Create variable growth_rate_industry_t+2
Data_panel <- Data_panel %>% 
  group_by(ind, year) %>% 
  mutate(growth_rate_industry_t2 = lead(growth_rate_industry, 2))


## Create variable outstanding_growth_rate_t+1
Data_panel <- Data_panel %>% 
  mutate(outstanding_growth_rate_t1 = growth_rate_t1 > growth_rate_industry_t1 + 0.1*growth_rate_industry_t1)

## Create variable outstanding_growth_rate_t+2
Data_panel <- Data_panel %>% 
  mutate(outstanding_growth_rate_t2 = growth_rate_t2 > growth_rate_industry_t2 + 0.1*growth_rate_industry_t2)


## Create variable fast_growing
Data_panel <- Data_panel %>% 
  mutate(fast_growing = outstanding_growth_rate_t1 & outstanding_growth_rate_t2)

```

```{r}
## Restrict Data_panel to 2010-2013

Data_panel <- Data_panel %>% 
  filter(year >= 2010 & year <= 2013)
```

```{r}
## Let's plot the relative frequency histogram of growth_rate in 2011
Data_panel %>% 
  filter(year == 2011) %>% 
  ggplot(aes(x = growth_rate)) +
  geom_density(alpha = 0.2, fill = "lightblue") +
  labs(title = "Relative Frequency Histogram of Growth Rate in 2011", x = "Growth Rate", y = "Relative Frequency") + xlim(-2, 6)
```



```{r}
## Lets' examine fast_growing
Data_panel %>% 
  group_by(year) %>%
  count(fast_growing)
```



### Feature Engineering 


## Dealing with Missing Values
```{r}
### Examining NAs in Data_panel
NA_Data_panel <- Data_panel %>%
  summarise(across(everything(), ~ sum(is.na(.)))) %>%
  pivot_longer(everything(), names_to = "column", values_to = "na_count") %>%
  arrange(desc(na_count)) 

NA_Data_panel 
```

```{r}
# drop variables with too many NAs
Data_panel <- Data_panel %>%
  select(-c(D, COGS, finished_prod, net_dom_sales, net_exp_sales, wages, labor_avg))
```


